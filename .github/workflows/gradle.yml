# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    # 1. Java 17 세팅
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # 2. Spring Boot 애플리케이션 빌드
    - name: Build with Gradle
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
        arguments: clean bootJar

    # 3. Docker 이미지 빌드
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/tutty:latest .

    # 4. DockerHub 로그인
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # 5. Docker Hub 이미지 푸시
    - name: docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/tutty:latest

  run-docker-image-on-ec2:
    needs: build-docker-image
    runs-on: self-hosted

    steps:
      # 1. 포트 점유 상태 확인 및 해제
      - name: Free up port 8080
        run: |
          if lsof -i:8080; then
            echo "Freeing up port 8080..."
            sudo fuser -k 8080/tcp
          fi
      
      # 2. 기존 컨테이너 중지 및 제거
      - name: Stop and remove existing container
        run: |
          if [ $(sudo docker ps -a -q -f name=tutty) ]; then
            echo "Stopping and removing existing container..."
            sudo docker stop tutty
            sudo docker rm tutty
          fi

      # 3. 최신 이미지를 가져옴
      - name: Pull latest Docker image
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/tutty:latest

      # 4. 새 컨테이너 실행
      - name: Run new container
        run: sudo docker run --name tutty --rm -d -p 8080:8080 --env-file ~/.env ${{ secrets.DOCKERHUB_USERNAME }}/tutty:latest

      # 5. 사용하지 않는 Docker 리소스 정리
      - name: Clean up unused Docker resources
        run: sudo docker system prune -f
